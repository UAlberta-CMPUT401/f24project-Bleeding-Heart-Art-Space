{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bleeding Heart Art Space Docs Sprint Pages Project Requirements Software Design Project Management Teamwork Tests Matrix UI/UX Documentation User Manual Deployment Instructions Job Description","title":"Home"},{"location":"#bleeding-heart-art-space-docs","text":"","title":"Bleeding Heart Art Space Docs"},{"location":"#sprint-pages","text":"Project Requirements Software Design Project Management Teamwork Tests Matrix UI/UX","title":"Sprint Pages"},{"location":"#documentation","text":"User Manual Deployment Instructions Job Description","title":"Documentation"},{"location":"UI-UX-and-Accessibility-Principles/","text":"Usability Heuristics for User Interface Design Visibility of system status The design should always keep users informed about what is going on, through appropriate feedback within a reasonable amount of time. We have implemented this by letting users know when an event or change has taken place in the system through alert pop-ups seen in the browser. Aesthetic and Minimal Design Interfaces should not contain information that is irrelevant or rarely needed. Every extra unit of information in an interface competes with the relevant units of information and diminishes their relative visibility. By building the UI of the app as a minimal interface with just the necessary tasks, we have achieved a minimal design while adopting Bleeding Heart Art Space\u2019s color theme to add to the aesthetic. User Control and Freedom Users often perform actions by mistake. They need a clearly marked \"emergency exit\" to leave the unwanted action without having to go through an extended process. By adding a way to exit or undo an action, users are able to navigate back from an unwanted action without having to complete the whole process. This is done in our app by adding an exit/close button on the top left of our pop-up windows. Accessibility To test our website\u2019s accessibility, we used Google\u2019s Lighthouse to generate reports. More info on Lighthouse can be found here. Upon running the tool on our website, we get an 82% for accessibility. Lighthouse tests accessibility in these areas: Keyboard Navigation: Ensures all features work with a keyboard. Color Contrast: Checks text readability against backgrounds. Alt Text: Verifies images have descriptive text. ARIA Labels: Assesses proper ARIA roles for screen readers. Page Structure: Ensures proper use of headings and HTML tags. Form Labels: Confirms all inputs have clear labels. Interactive Elements: Checks buttons/links are labeled and focusable. These help improve usability for users with disabilities. Areas we will improve on in Sprint 4 include: Aria: roles on incompatible elements Names and Labels: Images do not have alt attributes Contrast: Background and foreground colors do not have a sufficient contrast ratio.","title":"UI/UX"},{"location":"UI-UX-and-Accessibility-Principles/#usability-heuristics-for-user-interface-design","text":"","title":"Usability Heuristics for User Interface Design"},{"location":"UI-UX-and-Accessibility-Principles/#visibility-of-system-status","text":"The design should always keep users informed about what is going on, through appropriate feedback within a reasonable amount of time. We have implemented this by letting users know when an event or change has taken place in the system through alert pop-ups seen in the browser.","title":"Visibility of system status"},{"location":"UI-UX-and-Accessibility-Principles/#aesthetic-and-minimal-design","text":"Interfaces should not contain information that is irrelevant or rarely needed. Every extra unit of information in an interface competes with the relevant units of information and diminishes their relative visibility. By building the UI of the app as a minimal interface with just the necessary tasks, we have achieved a minimal design while adopting Bleeding Heart Art Space\u2019s color theme to add to the aesthetic.","title":"Aesthetic and Minimal Design"},{"location":"UI-UX-and-Accessibility-Principles/#user-control-and-freedom","text":"Users often perform actions by mistake. They need a clearly marked \"emergency exit\" to leave the unwanted action without having to go through an extended process. By adding a way to exit or undo an action, users are able to navigate back from an unwanted action without having to complete the whole process. This is done in our app by adding an exit/close button on the top left of our pop-up windows.","title":"User Control and Freedom"},{"location":"UI-UX-and-Accessibility-Principles/#accessibility","text":"To test our website\u2019s accessibility, we used Google\u2019s Lighthouse to generate reports. More info on Lighthouse can be found here. Upon running the tool on our website, we get an 82% for accessibility. Lighthouse tests accessibility in these areas: Keyboard Navigation: Ensures all features work with a keyboard. Color Contrast: Checks text readability against backgrounds. Alt Text: Verifies images have descriptive text. ARIA Labels: Assesses proper ARIA roles for screen readers. Page Structure: Ensures proper use of headings and HTML tags. Form Labels: Confirms all inputs have clear labels. Interactive Elements: Checks buttons/links are labeled and focusable. These help improve usability for users with disabilities. Areas we will improve on in Sprint 4 include: Aria: roles on incompatible elements Names and Labels: Images do not have alt attributes Contrast: Background and foreground colors do not have a sufficient contrast ratio.","title":"Accessibility"},{"location":"deployment-instructions/","text":"Deployment Instructions System Requirements Ubuntu Server 20.04 LTS or newer Minimum 4GB RAM 20GB available disk space The deployment instructions provided in this document have been tested and verified on Ubuntu Server 20.04 LTS. However, please note: Other Ubuntu versions (18.04+) should work with minimal or no modifications Other Linux distributions (Debian, CentOS, etc.) should also work but may require: Different package manager commands (apt \u2192 yum/dnf) Slightly different Docker installation steps Modified firewall configurations Different service management commands These instructions are written for deployment via direct terminal access to a Linux server. The steps assume you have root/sudo access to the server and will be managing the Docker containers directly. While these instructions focus on direct server deployment, the Docker configuration provided should also be compatible with most cloud platforms that support Docker container management. The actual deployment steps would differ based on your chosen cloud platform's interfaces and tools, but the core Docker and application configuration would remain largely the same. Prerequisites 1. Firewall Configuration Ensure the following ports are open in your server firewall: Port 80 (HTTP): Required for web traffic Port 443 (HTTPS): Required if using SSL Port 22 (SSH): Required for server access 2. Firebase Authentication Setup Step 1: Create Firebase Project Visit Firebase Console ( https://console.firebase.google.com ) Click \"Create a project\" or select existing project Follow the setup wizard to create your project Step 2: Enable Authentication In Firebase Console, click \"Authentication\" Click \"Get Started\" Enable Email/Password authentication: Click \"Sign-in method\" Click \"Email/Password\" Toggle \"Enable\" Save Enable Google authentication: Click \"Sign-in method\" Click \u201cAdd new provider\u201d Click \"Google\" Select support email Save Click \u201cSettings\u201d > \u201cAuthorized Domains\u201d > \u201cAdd domain\u201d and add your domain Step 3: Create Web App Click gear icon \u2699\ufe0f (Project Settings) Under \"Your apps\", click web icon (</>) Register app with a nickname Copy the provided firebaseConfig variables for the frontend environment file (described in section Configure environment variables ) Step 4: Get Admin SDK Credentials In Project Settings, go to \"Service accounts\" Click \"Generate new private key\" Save the JSON file securely This file will be used for Firebase credentials JSON file used on your server yourapplication/backend/firebase-credentials.json (described in section Configure environment variables ) 3. SendGrid Setup Step 1: Create a SendGrid Account Go to the SendGrid website and sign up for an account. Verify your email address and complete the required account setup. Step 2: Generate an API Key Log in to your SendGrid dashboard. Navigate to the API Keys section: Go to Settings > API Keys . Click on Create API Key . Enter a name for the API key (e.g., MyApp-SendGrid-API ). Assign Full Access or Restricted Access permissions based on your requirements. Click Create & View to generate the key. Copy the API key and save it securely. You won't be able to view it again. Step 3: Add SendGrid to Your Project Install the SendGrid library for your application: For Node.js: Run the command: npm install @sendgrid/mail Set up the SendGrid API key in your environment variables (described in section Configure environment variables ): Add the following to your .env file in backend: 1. SENDGRID_API_KEY = <your-sendgrid-api-key> 2. SENDGRID_FROM_EMAIL = <your-verified-sender-email> Replace <your-sendgrid-api-key> with your API key. Replace <your-verified-sender-email> with the email address you\u2019ll use as the sender (this email must be verified in SendGrid). Step 4: Verify Your Sender Identity In the SendGrid dashboard, navigate to Settings > Sender Authentication . Set up either: Single Sender Verification : Add your email address (e.g., example@domain.com ) and verify it. Initial Server Setup 1. Update the system packages: sudo apt update sudo apt upgrade -y 2. Install Docker 1. Set up Docker's apt repository. # Add Docker's official GPG key: sudo apt-get update sudo apt-get install ca-certificates curl sudo install -m 0755 -d /etc/apt/keyrings sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc sudo chmod a+r /etc/apt/keyrings/docker.asc # Add the repository to Apt sources: echo \\ \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\ $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable\" | \\ sudo tee /etc/apt/sources.list.d/docker.list > /dev/null sudo apt-get update 2. Install the Docker packages. sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin 3. Verify that the installation is successful by running the hello-world image: sudo docker run hello-world This command downloads a test image and runs it in a container. When the container runs, it prints a confirmation message and exits. For more info: https://docs.docker.com/engine/install/ubuntu/ Application Deployment 1. Transfer application files to server: This step is done on your local machine: From Linux/macOS # From your local terminal scp your-application.tar.gz user@your-server-ip:/home/user/ From Windows # Using PowerShell/Command Prompt with OpenSSH scp your-application.tar.gz user@your-server-ip:/home/user/ # OR if using PuTTY's pscp pscp your-application.tar.gz user@your-server-ip:/home/user/ # Note: If using Windows Terminal or PowerShell, you might need to specify the full path: # C:\\Users\\YourUsername\\path\\to\\your-application.tar.gz 2. On the server, extract the files: # For .tar.gz cd /home/user tar -xzf your-application.tar.gz cd your-application 3. Configure environment variables: For both the frontend and backend applications, you'll need to set up environment variables using the provided example files as templates. Frontend Configuration: # Create production environment file from example cp frontend/.env.example frontend/.env.production.local # Edit the environment file with your production values nano frontend/.env.production.local Example: # Backend site VITE_API_URL=http://example.com/api # Firebase Config VITE_FB_API_KEY=aBcDeFg VITE_FB_AUTH_DOMAIN=bleeding-heart-art-space.firebaseapp.com VITE_FB_PROJECTID=bleeding-heart-art-space VITE_FB_STORAGEBUCKET=bleeding-heart-art-space.appspot.com VITE_FB_MESSAGINGSENDERID=123456789 VITE_FB_APPID=1:123456789:web:1a2b3c4d5e VITE_API_URL : must be http://<domain or ip>/api Copy each Firebase config variable from section Create Web App Backend Configuration: # Create production environment file from example cp backend/.env.example backend/.env.production.local # Edit the environment file with your production values nano backend/.env.production.local Example: # port to run application on PORT=80 # the lowest priority of logs that is displayed (usually `debug` for development and `warn` in production) # log levels - error: 0, warn: 1, info: 2, http: 3, verbose: 4, debug: 5, silly: 6 LOG_LEVEL=warn # database host name (usually `localhost` for development and `db` in production) DB_NAME=bhas # postgres port (default 5432 for postgres) DB_HOST=db # postgres database name DB_USER=admin # postgres username DB_PORT=5432 # postgres password for username DB_PASSWORD=password # path to firebase credentials json file GOOGLE_APPLICATION_CREDENTIALS=./firebase-credentials.json # sendgrid email api SENDGRID_API_KEY=SG.aBcDeFgHiJkLmNoPqRsTuVwXyZ SENDGRID_FROM_EMAIL=info@email.com The variables that should be configured are: DB_USER : any username (or keep as admin ). DB_PASSWORD : must be a secure password. GOOGLE_APPLICATION_CREDENTIALS : create a new Firebase credentials JSON file described in section Get Admin SDK Credentials and copy it to the server to the location backend/firebase-credentials.json of the application. SENDGRID_API_KEY : the api key obtained from section SendGrid Setup . SENDGRID_FROM_EMAIL : the email being used with SendGrid. All other variables do not need modification. 4. Deploy with Docker Compose From the application root directory, start docker: sudo docker compose --env-file ./backend/.env.production.local up --build -d 5. Enable SSL (Recommended) 1. Install NGINX and Certbot: sudo apt update sudo apt install nginx certbot python3-certbot-nginx 2. Create/edit NGINX configuration file: sudo nano /etc/nginx/sites-available/your-domain.conf 3. Add basic NGINX configuration: server { listen 80; server_name your-domain.com; location / { proxy_pass http://localhost:your_app_port; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } } 4. Create symbolic link: sudo ln -s /etc/nginx/sites-available/your-domain.conf /etc/nginx/sites-enabled/ 5. Test NGINX configuration: sudo nginx -t 6. If test is successful, restart NGINX: sudo systemctl restart nginx 7. Obtain SSL certificate: sudo certbot --nginx -d your-domain.com 8. Certbot will automatically modify your NGINX configuration to include SSL settings. The final configuration should look something like: server { listen 80; server_name your-domain.com; return 301 https://$server_name$request_uri; } server { listen 443 ssl; server_name your-domain.com; ssl_certificate /etc/letsencrypt/live/your-domain.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/your-domain.com/privkey.pem; location / { proxy_pass http://localhost:your_app_port; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } } Additional important steps: 9. Set up auto-renewal for SSL certificate: sudo certbot renew --dry-run For detailed NGINX configuration or alternative SSL solutions, refer to: NGINX documentation: https://nginx.org/en/docs/ Let's Encrypt documentation: https://letsencrypt.org/docs/","title":"Deployment Instructions"},{"location":"deployment-instructions/#deployment-instructions","text":"","title":"Deployment Instructions"},{"location":"deployment-instructions/#system-requirements","text":"Ubuntu Server 20.04 LTS or newer Minimum 4GB RAM 20GB available disk space The deployment instructions provided in this document have been tested and verified on Ubuntu Server 20.04 LTS. However, please note: Other Ubuntu versions (18.04+) should work with minimal or no modifications Other Linux distributions (Debian, CentOS, etc.) should also work but may require: Different package manager commands (apt \u2192 yum/dnf) Slightly different Docker installation steps Modified firewall configurations Different service management commands These instructions are written for deployment via direct terminal access to a Linux server. The steps assume you have root/sudo access to the server and will be managing the Docker containers directly. While these instructions focus on direct server deployment, the Docker configuration provided should also be compatible with most cloud platforms that support Docker container management. The actual deployment steps would differ based on your chosen cloud platform's interfaces and tools, but the core Docker and application configuration would remain largely the same.","title":"System Requirements"},{"location":"deployment-instructions/#prerequisites","text":"","title":"Prerequisites"},{"location":"deployment-instructions/#1-firewall-configuration","text":"Ensure the following ports are open in your server firewall: Port 80 (HTTP): Required for web traffic Port 443 (HTTPS): Required if using SSL Port 22 (SSH): Required for server access","title":"1. Firewall Configuration"},{"location":"deployment-instructions/#2-firebase-authentication-setup","text":"","title":"2. Firebase Authentication Setup"},{"location":"deployment-instructions/#step-1-create-firebase-project","text":"Visit Firebase Console ( https://console.firebase.google.com ) Click \"Create a project\" or select existing project Follow the setup wizard to create your project","title":"Step 1: Create Firebase Project"},{"location":"deployment-instructions/#step-2-enable-authentication","text":"In Firebase Console, click \"Authentication\" Click \"Get Started\" Enable Email/Password authentication: Click \"Sign-in method\" Click \"Email/Password\" Toggle \"Enable\" Save Enable Google authentication: Click \"Sign-in method\" Click \u201cAdd new provider\u201d Click \"Google\" Select support email Save Click \u201cSettings\u201d > \u201cAuthorized Domains\u201d > \u201cAdd domain\u201d and add your domain","title":"Step 2: Enable Authentication"},{"location":"deployment-instructions/#step-3-create-web-app","text":"Click gear icon \u2699\ufe0f (Project Settings) Under \"Your apps\", click web icon (</>) Register app with a nickname Copy the provided firebaseConfig variables for the frontend environment file (described in section Configure environment variables )","title":"Step 3: Create Web App"},{"location":"deployment-instructions/#step-4-get-admin-sdk-credentials","text":"In Project Settings, go to \"Service accounts\" Click \"Generate new private key\" Save the JSON file securely This file will be used for Firebase credentials JSON file used on your server yourapplication/backend/firebase-credentials.json (described in section Configure environment variables )","title":"Step 4: Get Admin SDK Credentials"},{"location":"deployment-instructions/#3-sendgrid-setup","text":"","title":"3. SendGrid Setup"},{"location":"deployment-instructions/#step-1-create-a-sendgrid-account","text":"Go to the SendGrid website and sign up for an account. Verify your email address and complete the required account setup.","title":"Step 1: Create a SendGrid Account"},{"location":"deployment-instructions/#step-2-generate-an-api-key","text":"Log in to your SendGrid dashboard. Navigate to the API Keys section: Go to Settings > API Keys . Click on Create API Key . Enter a name for the API key (e.g., MyApp-SendGrid-API ). Assign Full Access or Restricted Access permissions based on your requirements. Click Create & View to generate the key. Copy the API key and save it securely. You won't be able to view it again.","title":"Step 2: Generate an API Key"},{"location":"deployment-instructions/#step-3-add-sendgrid-to-your-project","text":"Install the SendGrid library for your application: For Node.js: Run the command: npm install @sendgrid/mail Set up the SendGrid API key in your environment variables (described in section Configure environment variables ): Add the following to your .env file in backend: 1. SENDGRID_API_KEY = <your-sendgrid-api-key> 2. SENDGRID_FROM_EMAIL = <your-verified-sender-email> Replace <your-sendgrid-api-key> with your API key. Replace <your-verified-sender-email> with the email address you\u2019ll use as the sender (this email must be verified in SendGrid).","title":"Step 3: Add SendGrid to Your Project"},{"location":"deployment-instructions/#step-4-verify-your-sender-identity","text":"In the SendGrid dashboard, navigate to Settings > Sender Authentication . Set up either: Single Sender Verification : Add your email address (e.g., example@domain.com ) and verify it.","title":"Step 4: Verify Your Sender Identity"},{"location":"deployment-instructions/#initial-server-setup","text":"","title":"Initial Server Setup"},{"location":"deployment-instructions/#1-update-the-system-packages","text":"sudo apt update sudo apt upgrade -y","title":"1. Update the system packages:"},{"location":"deployment-instructions/#2-install-docker","text":"","title":"2. Install Docker"},{"location":"deployment-instructions/#1-set-up-dockers-apt-repository","text":"# Add Docker's official GPG key: sudo apt-get update sudo apt-get install ca-certificates curl sudo install -m 0755 -d /etc/apt/keyrings sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc sudo chmod a+r /etc/apt/keyrings/docker.asc # Add the repository to Apt sources: echo \\ \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\ $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable\" | \\ sudo tee /etc/apt/sources.list.d/docker.list > /dev/null sudo apt-get update","title":"1. Set up Docker's apt repository."},{"location":"deployment-instructions/#2-install-the-docker-packages","text":"sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin","title":"2. Install the Docker packages."},{"location":"deployment-instructions/#3-verify-that-the-installation-is-successful-by-running-the-hello-world-image","text":"sudo docker run hello-world This command downloads a test image and runs it in a container. When the container runs, it prints a confirmation message and exits. For more info: https://docs.docker.com/engine/install/ubuntu/","title":"3. Verify that the installation is successful by running the hello-world image:"},{"location":"deployment-instructions/#application-deployment","text":"","title":"Application Deployment"},{"location":"deployment-instructions/#1-transfer-application-files-to-server","text":"This step is done on your local machine:","title":"1. Transfer application files to server:"},{"location":"deployment-instructions/#from-linuxmacos","text":"# From your local terminal scp your-application.tar.gz user@your-server-ip:/home/user/","title":"From Linux/macOS"},{"location":"deployment-instructions/#from-windows","text":"# Using PowerShell/Command Prompt with OpenSSH scp your-application.tar.gz user@your-server-ip:/home/user/ # OR if using PuTTY's pscp pscp your-application.tar.gz user@your-server-ip:/home/user/ # Note: If using Windows Terminal or PowerShell, you might need to specify the full path: # C:\\Users\\YourUsername\\path\\to\\your-application.tar.gz","title":"From Windows"},{"location":"deployment-instructions/#2-on-the-server-extract-the-files","text":"# For .tar.gz cd /home/user tar -xzf your-application.tar.gz cd your-application","title":"2. On the server, extract the files:"},{"location":"deployment-instructions/#3-configure-environment-variables","text":"For both the frontend and backend applications, you'll need to set up environment variables using the provided example files as templates.","title":"3. Configure environment variables:"},{"location":"deployment-instructions/#frontend-configuration","text":"# Create production environment file from example cp frontend/.env.example frontend/.env.production.local # Edit the environment file with your production values nano frontend/.env.production.local Example: # Backend site VITE_API_URL=http://example.com/api # Firebase Config VITE_FB_API_KEY=aBcDeFg VITE_FB_AUTH_DOMAIN=bleeding-heart-art-space.firebaseapp.com VITE_FB_PROJECTID=bleeding-heart-art-space VITE_FB_STORAGEBUCKET=bleeding-heart-art-space.appspot.com VITE_FB_MESSAGINGSENDERID=123456789 VITE_FB_APPID=1:123456789:web:1a2b3c4d5e VITE_API_URL : must be http://<domain or ip>/api Copy each Firebase config variable from section Create Web App","title":"Frontend Configuration:"},{"location":"deployment-instructions/#backend-configuration","text":"# Create production environment file from example cp backend/.env.example backend/.env.production.local # Edit the environment file with your production values nano backend/.env.production.local Example: # port to run application on PORT=80 # the lowest priority of logs that is displayed (usually `debug` for development and `warn` in production) # log levels - error: 0, warn: 1, info: 2, http: 3, verbose: 4, debug: 5, silly: 6 LOG_LEVEL=warn # database host name (usually `localhost` for development and `db` in production) DB_NAME=bhas # postgres port (default 5432 for postgres) DB_HOST=db # postgres database name DB_USER=admin # postgres username DB_PORT=5432 # postgres password for username DB_PASSWORD=password # path to firebase credentials json file GOOGLE_APPLICATION_CREDENTIALS=./firebase-credentials.json # sendgrid email api SENDGRID_API_KEY=SG.aBcDeFgHiJkLmNoPqRsTuVwXyZ SENDGRID_FROM_EMAIL=info@email.com The variables that should be configured are: DB_USER : any username (or keep as admin ). DB_PASSWORD : must be a secure password. GOOGLE_APPLICATION_CREDENTIALS : create a new Firebase credentials JSON file described in section Get Admin SDK Credentials and copy it to the server to the location backend/firebase-credentials.json of the application. SENDGRID_API_KEY : the api key obtained from section SendGrid Setup . SENDGRID_FROM_EMAIL : the email being used with SendGrid. All other variables do not need modification.","title":"Backend Configuration:"},{"location":"deployment-instructions/#4-deploy-with-docker-compose","text":"From the application root directory, start docker: sudo docker compose --env-file ./backend/.env.production.local up --build -d","title":"4. Deploy with Docker Compose"},{"location":"deployment-instructions/#5-enable-ssl-recommended","text":"","title":"5. Enable SSL (Recommended)"},{"location":"deployment-instructions/#1-install-nginx-and-certbot","text":"sudo apt update sudo apt install nginx certbot python3-certbot-nginx","title":"1. Install NGINX and Certbot:"},{"location":"deployment-instructions/#2-createedit-nginx-configuration-file","text":"sudo nano /etc/nginx/sites-available/your-domain.conf","title":"2. Create/edit NGINX configuration file:"},{"location":"deployment-instructions/#3-add-basic-nginx-configuration","text":"server { listen 80; server_name your-domain.com; location / { proxy_pass http://localhost:your_app_port; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } }","title":"3. Add basic NGINX configuration:"},{"location":"deployment-instructions/#4-create-symbolic-link","text":"sudo ln -s /etc/nginx/sites-available/your-domain.conf /etc/nginx/sites-enabled/","title":"4. Create symbolic link:"},{"location":"deployment-instructions/#5-test-nginx-configuration","text":"sudo nginx -t","title":"5. Test NGINX configuration:"},{"location":"deployment-instructions/#6-if-test-is-successful-restart-nginx","text":"sudo systemctl restart nginx","title":"6. If test is successful, restart NGINX:"},{"location":"deployment-instructions/#7-obtain-ssl-certificate","text":"sudo certbot --nginx -d your-domain.com","title":"7. Obtain SSL certificate:"},{"location":"deployment-instructions/#8-certbot-will-automatically-modify-your-nginx-configuration-to-include-ssl-settings-the-final-configuration-should-look-something-like","text":"server { listen 80; server_name your-domain.com; return 301 https://$server_name$request_uri; } server { listen 443 ssl; server_name your-domain.com; ssl_certificate /etc/letsencrypt/live/your-domain.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/your-domain.com/privkey.pem; location / { proxy_pass http://localhost:your_app_port; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } } Additional important steps:","title":"8. Certbot will automatically modify your NGINX configuration to include SSL settings. The final configuration should look something like:"},{"location":"deployment-instructions/#9-set-up-auto-renewal-for-ssl-certificate","text":"sudo certbot renew --dry-run For detailed NGINX configuration or alternative SSL solutions, refer to: NGINX documentation: https://nginx.org/en/docs/ Let's Encrypt documentation: https://letsencrypt.org/docs/","title":"9. Set up auto-renewal for SSL certificate:"},{"location":"job-description/","text":"Bleeding Heart Art Space Software Developer (Job Description) Job Summary: We are seeking a dedicated and skilled Software Developer to join our team in maintaining and enhancing our Volunteering Management Platform. This platform is designed to streamline the coordination of volunteers, manage events, manage shifts, and facilitate communication between event administrators and their volunteer base. If you are passionate about creating impactful software solutions and have experience in web development, this role offers an exciting opportunity to contribute to a meaningful project that supports community engagement and volunteerism. Job Responsibilities: System Maintenance & Support: Install, configure, and deploy the Volunteering Management Platform in various environments. Monitor system performance and ensure high availability, minimizing any production downtime. Troubleshoot and resolve bugs or issues that arise, ensuring the platform remains reliable and efficient. Feature Development: Collaborate with stakeholders to understand and implement new features that enhance platform functionality. Develop, test, and deploy new modules or functionalities based on user requirements and feedback. Ensure that new features integrate seamlessly with existing systems and workflows. System Updates & Enhancements: Regularly update the platform to incorporate the latest technologies and security practices. Optimize the existing codebase for better performance and scalability. Implement enhancements that improve user experience and streamline volunteer management processes. Collaboration & Best Practices: Provide training and support to administrators and end-users on how to effectively use and manage the platform. Participate in code reviews, testing, and deployment processes to maintain high standards. Stay updated with industry trends and incorporate relevant advancements into the platform. Job Skills & Qualifications: Required: Bachelor\u2019s degree in Computer Science, Software Engineering, or a related field Experience in web application development and maintenance Proficiency in working with React/Typescript Proficiency in working with Node.js (Express with Typescript) Experience with PostgreSQL and data modeling Understanding of RESTful API design and integration Familiarity with version control systems, preferably Git Preferred: Experience with Docker containers/deployments Experience integrating external APIs Excellent organizational and communication skills DevOps/Deployment experience Familiarity with Firebase Authentication","title":"Bleeding Heart Art Space"},{"location":"job-description/#bleeding-heart-art-space","text":"","title":"Bleeding Heart Art Space"},{"location":"job-description/#software-developer-job-description","text":"","title":"Software Developer (Job Description)"},{"location":"job-description/#job-summary","text":"We are seeking a dedicated and skilled Software Developer to join our team in maintaining and enhancing our Volunteering Management Platform. This platform is designed to streamline the coordination of volunteers, manage events, manage shifts, and facilitate communication between event administrators and their volunteer base. If you are passionate about creating impactful software solutions and have experience in web development, this role offers an exciting opportunity to contribute to a meaningful project that supports community engagement and volunteerism.","title":"Job Summary:"},{"location":"job-description/#job-responsibilities","text":"System Maintenance & Support: Install, configure, and deploy the Volunteering Management Platform in various environments. Monitor system performance and ensure high availability, minimizing any production downtime. Troubleshoot and resolve bugs or issues that arise, ensuring the platform remains reliable and efficient. Feature Development: Collaborate with stakeholders to understand and implement new features that enhance platform functionality. Develop, test, and deploy new modules or functionalities based on user requirements and feedback. Ensure that new features integrate seamlessly with existing systems and workflows. System Updates & Enhancements: Regularly update the platform to incorporate the latest technologies and security practices. Optimize the existing codebase for better performance and scalability. Implement enhancements that improve user experience and streamline volunteer management processes. Collaboration & Best Practices: Provide training and support to administrators and end-users on how to effectively use and manage the platform. Participate in code reviews, testing, and deployment processes to maintain high standards. Stay updated with industry trends and incorporate relevant advancements into the platform.","title":"Job Responsibilities:"},{"location":"job-description/#job-skills-qualifications","text":"","title":"Job Skills &amp; Qualifications:"},{"location":"job-description/#required","text":"Bachelor\u2019s degree in Computer Science, Software Engineering, or a related field Experience in web application development and maintenance Proficiency in working with React/Typescript Proficiency in working with Node.js (Express with Typescript) Experience with PostgreSQL and data modeling Understanding of RESTful API design and integration Familiarity with version control systems, preferably Git","title":"Required:"},{"location":"job-description/#preferred","text":"Experience with Docker containers/deployments Experience integrating external APIs Excellent organizational and communication skills DevOps/Deployment experience Familiarity with Firebase Authentication","title":"Preferred:"},{"location":"project-management/","text":"Project Management This page provides a general overview of the assigned tasks and roles for the duration of five sprints (subject to change). Story Map Project Plan Sprint 1 Due: September 30, 2024 Tasks Task Related US Assigned To Due Date User Stories, MoSCow, Story Points Documentation Samuel Chan Sep 17 UML Diagram Documentation Amaan Mohammed Sep 27 Sequence Diagram Documentation Rishit Gajjar Sep 27 Architecture Diagram Documentation Chase Johnson Sep 27 Low-Fidelity UI Flow Documentation Anhadpreet Singh Sep 27 Story Map & Project Plan Documentation Rushabh Shah Sep 27 Team Canvas Documentation Everyone Sep 28 Sprint 2 Due: October 14, 2024 User stories User story Story points SETUP - Setting up the dev environment 3 US 1.01 - Admin Sign Up 3 US 1.02 - Admin Log In 3 US 1.03 - Create and manage events 8 US 2.01 - Volunteer Sign Up 3 US 2.02 - Volunteer Log In 3 US 2.03 - View events on calendar 8 US 4.02 - View calendar 8 Estimated Sprint Velocity: 39 Tasks Task Related US Assigned To Due Date PostgreSQL database Setup SETUP Chase Johnson, Rishit Gajjar Oct 4 User authentication US 1.01, US 1.02, US 2.01, US 2.02 Chase Johnson, Rishit Gajjar Oct 8 Create viewable calendar and show events US 2.03, US 4.02 Samuel Chan, Amaan Mohammed Oct 8 User is able to create and view events US 1.03, US 2.03 Rushabh Shah, Anhadpreet Singh Oct 8 Sprint 3 Due: October 28, 2024 User stories User story Story points US 1.05 - Create volunteer schedules 8 US 1.08 - Admin signs up to volunteer 3 US 2.04 - Sign up for events 3 US 2.06 - Check into events 2 US 2.07 - Check out of events 2 US 2.08 - Automatic check out of events 2 US 3.01 - Artist requests event 3 US 3.02 - Artist signs up to oversee an event 3 US 3.03 - Artist creates shifts for the event 3 US 3.05 - Artist manage events 3 Estimated Sprint Velocity: 32 Tasks Task Related US Assigned To Due Date Multi-factor Authentication US 1.01, US 2.01 Chase Johnson, Rishit Gajjar Oct 22 Password Recovery US 1.01, US 2.01 Chase Johnson, Rishit Gajjar Oct 22 Google sign up and log in US 1.01, US 1.02, US 2.01, US 2.02 Chase Johnson, Rishit Gajjar Oct 22 Create different dashboard views for Admin, volunteers, and artists US 1.05, US 1.08 Chase Johnson,Rishit Gajjar Oct 22 Create roles/permissions for volunteers US 1.04 Chase Johnson, Rishit Gajjar Oct 22 Schedule view for volunteers US 1.05 Samuel Chan, Amaan Mohammed Oct 25 Create shifts for volunteers US 1.05, US 1.08 Samuel Chan, Amaan Mohammed Oct 25 Volunteers can sign up for shifts in events US 2.04 Rushabh Shah, Anhadpreet Singh Oct 25 Volunteers can check in and out of event US 2.06, US 2.07, US 2.08 Rushabh Shah, Anhadpreet Singh Oct 25 Artists can request their own event US 3.01 Amaan Mohammed Oct 25 Artists have permissions for shifts/one-time volunteers US 3.03, US 3.04 Samuel Chan Oct 25 Artists can sign up for and manage events US 3.02, US 3.05 Rushabh Shah, Anhadpreet Singh Oct 25 UI/UX Design Design Amaan Mohammed Oct 25 Sprint 4 Due: November 18, 2024 User stories User Story Story Points US 1.04 - Admin assign permissions 3 US 1.09 - Assign one-time volunteers 2 US 1.10 - Approve artist event requests 3 US 2.05 - Manage notification preferences 3 US 2.11 - View other volunteer status 1 US 3.04 - Artist assign one-time volunteers 2 Estimated Sprint Velocity: 14 Tasks Task Related US Assigned To Due Date Fix frontend for check-in and check-out for shifts US 2.06, US 2.07, US 2.08 Anhadpreet Singh, Rushabh Shah Nov 10 Allow artists and admins to create one-time volunteers US 1.09, US 3.04 Samuel Chan Nov 10 View other volunteers who have signed up for shifts US 2.04, US 2.11 Amaan Mohammed Nov 10 As an Admin, approve event requests US 1.10 Samuel Chan Nov 10 Overview page: Have a shift/event view for accessibility US 1.05 Samuel Chan, Amaan Mohammed Nov 10 Create notifications view and UI, allow users to manage preferences US 2.05 Amaan Mohammed Nov 10 Create notification functionality US 2.05, US 4.01 Amaan Mohammed, Samuel Chan Nov 10 Send out and receive notifications US 4.01 Amaan Mohammed Nov 10 Gather and send out emails US 1.07 Amaan Mohammed Nov 10 Page to complete signup US 1.01, US 1.02, US 2.01, US 2.02 Chase Johnson, Rishit Gajjar Nov 3 Enforce authorization on endpoints US 1.01, US 1.02, US 2.01, US 2.02 Chase Johnson, Rishit Gajjar Nov 3 Create different dashboard views for Admin, volunteers, and artists US 1.05, US 1.08 Chase Johnson, Rishit Gajjar Nov 3 Create edit page for roles/permissions of users US 1.04 Chase Johnson, Rishit Gajjar Nov 10 Profile page US 1.01, US 1.02, US 2.01, US 2.02 Chase Johnson, Rishit Gajjar Nov 10 Sprint 5 Due: December 2, 2024 User stories User Story Story Points US 1.06 - Manage volunteer attendance 3 US 1.07 - Send communication emails 1 US 2.09 - Receive summary of volunteer hours 5 US 4.01 - Receive events notifications 5 Estimated Sprint Velocity: 14 Tasks Task Related US Assigned To Due Date Allow admin to view all volunteers\u2019 hours if the client wants US 2.09 Anhadpreet Singh, Rushabh Shah Nov 23 Enforce max volunteers for shifts US 1.05, US 1.08 Anhadpreet Singh, Rushabh Shah Nov 24 Add start and end dates in shift creation US 1.05, US 1.08 Anhadpreet Singh, Rushabh Shah Nov 25 Update for better mobile view across the platform Design Everyone Nov 25 Modify current UI tests if functionality changes Tests Rushabh Shah Nov 25 Deploy for production Deployment Chase Johnson, Rishit Gajjar Dec 2 Give artist admin permission for requested events US 3.05 Chase Johnson Nov 25 Artist add shifts to event for event requests US 3.05 Chase Johnson, Rishit Gajjar Nov 25 Send emails 4.01 Anhadpreet Singh Nov 25 Admin edit Shifts US 2.04 Samuel Chan Nov 25 Clean up shifts view in overview US 1.05 Samuel Chan Nov 25 Shift notes US 2.04 Samuel Chan Nov 25 Edit Email and Password US 1.01, US 1.02, US 2.01, US 2.02 Rishit Gajjar Nov 25 Update the UI for Home Page Design Rishit Gajjar Nov 25","title":"Project Management"},{"location":"project-management/#project-management","text":"This page provides a general overview of the assigned tasks and roles for the duration of five sprints (subject to change).","title":"Project Management"},{"location":"project-management/#story-map","text":"","title":"Story Map"},{"location":"project-management/#project-plan","text":"","title":"Project Plan"},{"location":"project-management/#sprint-1","text":"Due: September 30, 2024","title":"Sprint 1"},{"location":"project-management/#tasks","text":"Task Related US Assigned To Due Date User Stories, MoSCow, Story Points Documentation Samuel Chan Sep 17 UML Diagram Documentation Amaan Mohammed Sep 27 Sequence Diagram Documentation Rishit Gajjar Sep 27 Architecture Diagram Documentation Chase Johnson Sep 27 Low-Fidelity UI Flow Documentation Anhadpreet Singh Sep 27 Story Map & Project Plan Documentation Rushabh Shah Sep 27 Team Canvas Documentation Everyone Sep 28","title":"Tasks"},{"location":"project-management/#sprint-2","text":"Due: October 14, 2024","title":"Sprint 2"},{"location":"project-management/#user-stories","text":"User story Story points SETUP - Setting up the dev environment 3 US 1.01 - Admin Sign Up 3 US 1.02 - Admin Log In 3 US 1.03 - Create and manage events 8 US 2.01 - Volunteer Sign Up 3 US 2.02 - Volunteer Log In 3 US 2.03 - View events on calendar 8 US 4.02 - View calendar 8 Estimated Sprint Velocity: 39","title":"User stories"},{"location":"project-management/#tasks_1","text":"Task Related US Assigned To Due Date PostgreSQL database Setup SETUP Chase Johnson, Rishit Gajjar Oct 4 User authentication US 1.01, US 1.02, US 2.01, US 2.02 Chase Johnson, Rishit Gajjar Oct 8 Create viewable calendar and show events US 2.03, US 4.02 Samuel Chan, Amaan Mohammed Oct 8 User is able to create and view events US 1.03, US 2.03 Rushabh Shah, Anhadpreet Singh Oct 8","title":"Tasks"},{"location":"project-management/#sprint-3","text":"Due: October 28, 2024","title":"Sprint 3"},{"location":"project-management/#user-stories_1","text":"User story Story points US 1.05 - Create volunteer schedules 8 US 1.08 - Admin signs up to volunteer 3 US 2.04 - Sign up for events 3 US 2.06 - Check into events 2 US 2.07 - Check out of events 2 US 2.08 - Automatic check out of events 2 US 3.01 - Artist requests event 3 US 3.02 - Artist signs up to oversee an event 3 US 3.03 - Artist creates shifts for the event 3 US 3.05 - Artist manage events 3 Estimated Sprint Velocity: 32","title":"User stories"},{"location":"project-management/#tasks_2","text":"Task Related US Assigned To Due Date Multi-factor Authentication US 1.01, US 2.01 Chase Johnson, Rishit Gajjar Oct 22 Password Recovery US 1.01, US 2.01 Chase Johnson, Rishit Gajjar Oct 22 Google sign up and log in US 1.01, US 1.02, US 2.01, US 2.02 Chase Johnson, Rishit Gajjar Oct 22 Create different dashboard views for Admin, volunteers, and artists US 1.05, US 1.08 Chase Johnson,Rishit Gajjar Oct 22 Create roles/permissions for volunteers US 1.04 Chase Johnson, Rishit Gajjar Oct 22 Schedule view for volunteers US 1.05 Samuel Chan, Amaan Mohammed Oct 25 Create shifts for volunteers US 1.05, US 1.08 Samuel Chan, Amaan Mohammed Oct 25 Volunteers can sign up for shifts in events US 2.04 Rushabh Shah, Anhadpreet Singh Oct 25 Volunteers can check in and out of event US 2.06, US 2.07, US 2.08 Rushabh Shah, Anhadpreet Singh Oct 25 Artists can request their own event US 3.01 Amaan Mohammed Oct 25 Artists have permissions for shifts/one-time volunteers US 3.03, US 3.04 Samuel Chan Oct 25 Artists can sign up for and manage events US 3.02, US 3.05 Rushabh Shah, Anhadpreet Singh Oct 25 UI/UX Design Design Amaan Mohammed Oct 25","title":"Tasks"},{"location":"project-management/#sprint-4","text":"Due: November 18, 2024","title":"Sprint 4"},{"location":"project-management/#user-stories_2","text":"User Story Story Points US 1.04 - Admin assign permissions 3 US 1.09 - Assign one-time volunteers 2 US 1.10 - Approve artist event requests 3 US 2.05 - Manage notification preferences 3 US 2.11 - View other volunteer status 1 US 3.04 - Artist assign one-time volunteers 2 Estimated Sprint Velocity: 14","title":"User stories"},{"location":"project-management/#tasks_3","text":"Task Related US Assigned To Due Date Fix frontend for check-in and check-out for shifts US 2.06, US 2.07, US 2.08 Anhadpreet Singh, Rushabh Shah Nov 10 Allow artists and admins to create one-time volunteers US 1.09, US 3.04 Samuel Chan Nov 10 View other volunteers who have signed up for shifts US 2.04, US 2.11 Amaan Mohammed Nov 10 As an Admin, approve event requests US 1.10 Samuel Chan Nov 10 Overview page: Have a shift/event view for accessibility US 1.05 Samuel Chan, Amaan Mohammed Nov 10 Create notifications view and UI, allow users to manage preferences US 2.05 Amaan Mohammed Nov 10 Create notification functionality US 2.05, US 4.01 Amaan Mohammed, Samuel Chan Nov 10 Send out and receive notifications US 4.01 Amaan Mohammed Nov 10 Gather and send out emails US 1.07 Amaan Mohammed Nov 10 Page to complete signup US 1.01, US 1.02, US 2.01, US 2.02 Chase Johnson, Rishit Gajjar Nov 3 Enforce authorization on endpoints US 1.01, US 1.02, US 2.01, US 2.02 Chase Johnson, Rishit Gajjar Nov 3 Create different dashboard views for Admin, volunteers, and artists US 1.05, US 1.08 Chase Johnson, Rishit Gajjar Nov 3 Create edit page for roles/permissions of users US 1.04 Chase Johnson, Rishit Gajjar Nov 10 Profile page US 1.01, US 1.02, US 2.01, US 2.02 Chase Johnson, Rishit Gajjar Nov 10","title":"Tasks"},{"location":"project-management/#sprint-5","text":"Due: December 2, 2024","title":"Sprint 5"},{"location":"project-management/#user-stories_3","text":"User Story Story Points US 1.06 - Manage volunteer attendance 3 US 1.07 - Send communication emails 1 US 2.09 - Receive summary of volunteer hours 5 US 4.01 - Receive events notifications 5 Estimated Sprint Velocity: 14","title":"User stories"},{"location":"project-management/#tasks_4","text":"Task Related US Assigned To Due Date Allow admin to view all volunteers\u2019 hours if the client wants US 2.09 Anhadpreet Singh, Rushabh Shah Nov 23 Enforce max volunteers for shifts US 1.05, US 1.08 Anhadpreet Singh, Rushabh Shah Nov 24 Add start and end dates in shift creation US 1.05, US 1.08 Anhadpreet Singh, Rushabh Shah Nov 25 Update for better mobile view across the platform Design Everyone Nov 25 Modify current UI tests if functionality changes Tests Rushabh Shah Nov 25 Deploy for production Deployment Chase Johnson, Rishit Gajjar Dec 2 Give artist admin permission for requested events US 3.05 Chase Johnson Nov 25 Artist add shifts to event for event requests US 3.05 Chase Johnson, Rishit Gajjar Nov 25 Send emails 4.01 Anhadpreet Singh Nov 25 Admin edit Shifts US 2.04 Samuel Chan Nov 25 Clean up shifts view in overview US 1.05 Samuel Chan Nov 25 Shift notes US 2.04 Samuel Chan Nov 25 Edit Email and Password US 1.01, US 1.02, US 2.01, US 2.02 Rishit Gajjar Nov 25 Update the UI for Home Page Design Rishit Gajjar Nov 25","title":"Tasks"},{"location":"project-requirements/","text":"Project Requirements Executive Summary The Volunteer Management Platform for Bleeding Heart Art Space aims to solve the challenges the organization faces with its current scheduling tool, which doesn\u2019t quite fit their needs. This custom platform will streamline the process of organizing volunteer events and shifts, enabling administrators to create and manage events, track volunteer attendance, and send timely emails. Volunteers will benefit from a simple user-friendly way to easily sign up for shifts, view upcoming events, and receive reminders. The primary users of this system will be the administrators and volunteers of Bleeding Heart Art Space. The platform will be used to simplify volunteer coordination, improve communication, and optimize event management, contributing to the smooth operation of the community art space. Project Glossary Admin : A user with elevated permissions responsible for managing events, assigning roles, and organizing schedules. Admins can create, edit, and delete events, assign volunteers to shifts, and oversee overall operations. They also have the ability to sign up for volunteer shifts themselves. Volunteer : A general user who participates in events and activities organized by admins. Volunteers can view available events, sign up for shifts, check in and out of events, and receive emails and reminders. Artist : A user responsible for requesting events that have to be approved by the admins. In some cases, the artist might also participate in events or activities organized by the volunteers and admins, especially if the event centers around an art exhibit or installation. Event : A scheduled activity that requires volunteers. Events are created and managed by admins and can have specific times, dates, locations, and roles. Volunteers sign up for these events. Shift : A designated time slot within an event during which volunteers are expected to participate. Shifts may have specific start and end times. Calendar : A calendar meant to organize volunteers for an event. It may include multiple shifts and volunteers may use it to sign up for different time slots. Emails : Alerts sent to users via email or app to remind them of upcoming events or other important information. Volunteers and admins can subscribe or unsubscribe from emails. Permissions : Access rights assigned by an admin to other users. Permissions determine what actions a user can perform, such as creating events or managing schedules. Roles : Specific functions or duties that volunteers might be assigned within an event (e.g., setup, registration, crowd control). Admins can assign roles when creating events. Dashboard : A centralized page where admins can monitor events, volunteer sign-ups, attendance, and manage schedules. Volunteers may also have a dashboard to view upcoming events they are signed up for. One-time User : A user that does not have an account that is added to an event as a one-time volunteer or artist by an admin of the event. User Stories Admin User Stories US 1.01 - Admin Sign up As an Admin, I want to sign up securely so that I can re-use my account to manage events and volunteers in the future. Acceptance Criteria: Admin can sign up using email and password or social login. Secure password recovery and multi-factor authentication. US 1.02 - Login and logout Securely As an Admin, I want to log in and log out securely so that I can manage the volunteer events and schedules. Acceptance Criteria: Admin can log in using email and password or social login. Admin can log out securely Secure password recovery and multi-factor authentication. US 1.03 - Create and Manage Events As an Admin, I want to create and manage events so that I can schedule volunteer opportunities. Acceptance Criteria: Admin can create, edit, or delete events. Admin can specify event details like date, time, location, number of volunteers needed, and any specific roles or skills required. Admin can set recurring events. US 1.04 - Assign Permissions to Other Users As an Admin, I want to assign permissions to other users so that I can delegate event management tasks. Acceptance Criteria: Admin can assign specific permissions (event creation, scheduling, etc.) to other users. Admin can revoke permissions at any time. US 1.05 - Create and Manage Volunteer Schedules/Calendar As an Admin, I want to create volunteer schedules/calendars so that shifts are organized and resources are optimized. Acceptance Criteria: Admin can create and edit schedules for each event. Admin can assign specific volunteers to shifts or allow volunteers to self-select shifts. US 1.06 - Manage Volunteer Attendance As an Admin, I want to view and manage volunteer attendance so that I can ensure accurate record-keeping. Acceptance Criteria: Admin can see check-ins and check-outs for each event. Admin can override check-in/out statuses if necessary. US 1.07 - Send Communication emails As an Admin, I want to send emails to all volunteers at once so that they are informed of upcoming shifts. Acceptance Criteria: Admin can send emails to the volunteers via the email app but can get the email IDs of the volunteers automatically from the platform. US 1.08 - Sign Up to Volunteer for an Event As an Admin, I want to sign up to volunteer for an event, so that I can participate in the event just like a regular volunteer. Acceptance Criteria: Admin can see the same calendar of available events as volunteers. Admin can sign up for available shifts in events they create or manage. Admin receives confirmation of sign-up via email or app notification. Admin can check in and check out of events like regular volunteers. Admin receives reminders and event emails based on their preferences. Admin\u2019s participation is recorded alongside other volunteers, but they retain their admin privileges during the event. US 1.09 - Assign one-time volunteers As an Admin, I want to be able to assign one-time volunteers so that I can fill specific roles for events without requiring ongoing commitment from the volunteers. Acceptance Criteria: Admin can assign volunteers for a specific shift or event. Assigned volunteers receive a notification of their assigned shift or role. Admin can view and modify these assignments at any time before the event begins. US 1.10 - Approve Artist Event Requests As an Admin, I want to be able to approve artist event requests so that I can review and authorize events that align with organizational goals. Acceptance Criteria: Admin can view a list of event requests submitted by artists. Admin can approve or reject event requests. Approved events become visible in the event calendar for volunteers to sign up. Artists receive emails once their event is approved or rejected. Volunteer User Stories: US 2.01 - Sign up to be a Volunteer As a Volunteer, I want to sign up securely so that I can re-use my account to volunteer in the future. Acceptance Criteria: Volunteers can sign up using email and password or social login. Secure password recovery and multi-factor authentication. US 2.02 - Log in Securely As a Volunteer, I want to log in securely so that I can access my volunteer schedule and events. Acceptance Criteria: Volunteers can log in using email and password or social login. Secure password recovery and multi-factor authentication. US 2.03 - View Available Events on a Calendar As a Volunteer, I want to view available events on a calendar so that I can choose which events to sign up for. Acceptance Criteria: Volunteers can see a calendar view of all upcoming events. Volunteers can filter events by date, location, or event type. US 2.04 - Sign up for Events As a Volunteer, I want to sign up for events so that I can participate in volunteer activities. Acceptance Criteria: Volunteers can sign up for available shifts in events. Volunteers receive confirmation of sign-up via email or app notification. US 2.05 - Manage Email Preferences As a Volunteer, I want to manage my emails so that I can receive or opt out of reminders. Acceptance Criteria: Volunteers can subscribe or unsubscribe to email or app emails. Volunteers receive event reminders based on their preferences. US 2.06 - Check into Events As a Volunteer, I want to check into events when my shift starts so that my attendance is recorded. Acceptance Criteria: Volunteers can check into the event once the shift begins (via the app or web). A notification or prompt is sent to the volunteer when the shift start time approaches. US 2.07 - Check out of Events As a Volunteer, I want to check out of events when my shift ends so that I can log my volunteer hours. Acceptance Criteria: Volunteers can check out of the event manually once their shift is over. A notification is sent if the volunteer forgets to check out. US 2.08 - Automatic Check-out When Event Ends As a Volunteer, I want to be automatically checked out when the event ends so that I don't have to worry if I forget to check out. Acceptance Criteria: Volunteers are automatically checked out if they haven't manually checked out when the event ends. US 2.09 - Receive Summary of Volunteer Hours As a Volunteer, I want to receive a summary of my volunteer hours after the event so that I can track my contributions. Acceptance Criteria: Volunteers receive an email or notification summarizing their total hours after each event. Volunteers can view a history of their hours in their profile. US 2.10 - Inter-Communication of volunteers on the platform As a Volunteer, I want to reach out to fellow volunteers attending an exhibit/event. Acceptance Criteria: Volunteers have the option to chat with fellow volunteers. US 2.11 - View other volunteer status As a volunteer, I want to be able to see the different volunteers that I are signed up for different events Acceptance Criteria: Volunteers can check who is signed up on events made in the calendar Artist User Stories: US 3.01 - Request Events As an Artist, I want to be able to request events so that I can showcase my work or host activities that involve volunteers. Acceptance Criteria: Artists can fill out a form to request a new event, specifying the event details (date, time, location, description). Event requests must be approved by an admin before they are confirmed. US 3.02 - Sign Up to Oversee an Event As an Artist, I want to be able to sign up to oversee an event so that I can manage it personally and ensure everything runs smoothly. Acceptance Criteria: Artists can sign up as the primary overseer of the event. Artists receive reminders and emails for the event. Artists can manage volunteers during the event. US 3.03 - Create Shifts for the Event As an Artist, I want to be able to create any number and duration of shifts for the event so that volunteers can work at different times and the event runs efficiently. Acceptance Criteria: Artists can create multiple shifts, each with a start time, end time, and number of required volunteers. Shifts can be edited or deleted by the artist at any time before the event begins. US 3.04 - Assign one-time volunteers As an Artist, I want to be able to assign one-time volunteers so that I can get help from specific people for a particular event. Acceptance Criteria: Artists can assign volunteers for a specific shift or event. Assigned volunteers receive an email or app notification of their assigned role and shift. US 3.05 - Manage Events As an Artist, I want to be able to edit the events I made so that I can update event details or make changes as needed. Acceptance Criteria: Artists can edit event details such as time, location, description, and number of required volunteers. Changes to the event trigger emails to volunteers who have signed up for affected shifts. General User Stories: US 4.01 - Receive Event emails As a User, I want to receive emails for upcoming events so that I am reminded of my commitments. Acceptance Criteria: Users can opt in to receive emails via email or app. Reminders are sent at customizable intervals (e.g., a day before, an hour before the event). US 4.02 - View Calendar As a user, I want to see a calendar view of events for ease of visuality. Acceptance Criteria: Users can always view a calendar of events on their dashboard. MoSCoW Must have: US 1.01 (Sign up Securely) US 1.02 (Login and logout securely) US 1.03 (Create and Manage Events) US 1.04 (Assign Permissions to Other Users) US 1.05 (Create Volunteer Schedules) US 2.01 (Sign up Securely) US 2.02 (Login and logout securely) US 2.03 (View Available Events on a Calendar) US 2.04 (Sign up for Events) US 4.02 (View Calendar) Should have: US 1.07 (Send emails or Reminders) US 1.10 (Approve Artist Event Requests) US 2.05 (Manage emails Preferences) US 2.06 (Check into Events) US 2.07 (Check out of Events) US 2.08 (Automatic Check-out When Event Ends) US 3.01 (Request Events) US 3.02 (Sign Up to Oversee an Event) US 3.03 (Create Shifts for the Event) US 3.04 (Assign One-Time Volunteers) US 3.05 (Edit Events) US 4.01 (Recieve Event Emails) Could have: US 1.06 (Manage Volunteer Attendance) US 1.08 (Sign Up to Volunteer for an Event) US 1.09 (Assign one-time volunteers) US 2.09 (Receive Summary of Volunteer Hours) US 2.11 (View other Volunteer status) Would Like But Won't Get: US 2.10 (Inter-Communication of volunteers on the platform) Similar Products SignUpGenius - Football SignUps Volunteer Management System Host (SignUpGenius). Calendar format can be used as inspiration for scheduling tasks. Timecounts - Bleeding Heart Volunteer Management System Host (Timecounts). This is our client\u2019s previous system. The color palette can be used as inspiration for our system. Open-source Projects OpenVolunteerPlatform Automate and optimize work of volunteers for organization or charity. Some of their functionalities include: reports and statistics for admins, management panel, automatic scheduling, producing reports and collecting feedback from the field. The automatic scheduling and management panel can be used as inspiration for our system. Engles System System to coordinate large amount of helpers and shifts for big events. Some of their functionalities include: shifts that are organized through filters, multi language coverage, exports shifts to ical, reward system, Q and A section, 2 factor authentication. Perhaps the filtering and exporting functionalities of the shifts can be used as inpiration to our project. Technical Resources Frontend: React (Vite with Typescript) React Documentation Bulletproof React (React project structure guide) Vite Backend: Node (Express with Typescript) + PostgreSQL Node Documentation Express.js Kysely (SQL query builder in node) Setting up Postgres Firebase Authentication Sendgrid Deployment: Cybera Deploy on Cybera - Documentation","title":"Project Requirements"},{"location":"project-requirements/#project-requirements","text":"","title":"Project Requirements"},{"location":"project-requirements/#executive-summary","text":"The Volunteer Management Platform for Bleeding Heart Art Space aims to solve the challenges the organization faces with its current scheduling tool, which doesn\u2019t quite fit their needs. This custom platform will streamline the process of organizing volunteer events and shifts, enabling administrators to create and manage events, track volunteer attendance, and send timely emails. Volunteers will benefit from a simple user-friendly way to easily sign up for shifts, view upcoming events, and receive reminders. The primary users of this system will be the administrators and volunteers of Bleeding Heart Art Space. The platform will be used to simplify volunteer coordination, improve communication, and optimize event management, contributing to the smooth operation of the community art space.","title":"Executive Summary"},{"location":"project-requirements/#project-glossary","text":"Admin : A user with elevated permissions responsible for managing events, assigning roles, and organizing schedules. Admins can create, edit, and delete events, assign volunteers to shifts, and oversee overall operations. They also have the ability to sign up for volunteer shifts themselves. Volunteer : A general user who participates in events and activities organized by admins. Volunteers can view available events, sign up for shifts, check in and out of events, and receive emails and reminders. Artist : A user responsible for requesting events that have to be approved by the admins. In some cases, the artist might also participate in events or activities organized by the volunteers and admins, especially if the event centers around an art exhibit or installation. Event : A scheduled activity that requires volunteers. Events are created and managed by admins and can have specific times, dates, locations, and roles. Volunteers sign up for these events. Shift : A designated time slot within an event during which volunteers are expected to participate. Shifts may have specific start and end times. Calendar : A calendar meant to organize volunteers for an event. It may include multiple shifts and volunteers may use it to sign up for different time slots. Emails : Alerts sent to users via email or app to remind them of upcoming events or other important information. Volunteers and admins can subscribe or unsubscribe from emails. Permissions : Access rights assigned by an admin to other users. Permissions determine what actions a user can perform, such as creating events or managing schedules. Roles : Specific functions or duties that volunteers might be assigned within an event (e.g., setup, registration, crowd control). Admins can assign roles when creating events. Dashboard : A centralized page where admins can monitor events, volunteer sign-ups, attendance, and manage schedules. Volunteers may also have a dashboard to view upcoming events they are signed up for. One-time User : A user that does not have an account that is added to an event as a one-time volunteer or artist by an admin of the event.","title":"Project Glossary"},{"location":"project-requirements/#user-stories","text":"","title":"User Stories"},{"location":"project-requirements/#admin-user-stories","text":"","title":"Admin User Stories"},{"location":"project-requirements/#us-101-admin-sign-up","text":"As an Admin, I want to sign up securely so that I can re-use my account to manage events and volunteers in the future. Acceptance Criteria: Admin can sign up using email and password or social login. Secure password recovery and multi-factor authentication.","title":"US 1.01 - Admin Sign up"},{"location":"project-requirements/#us-102-login-and-logout-securely","text":"As an Admin, I want to log in and log out securely so that I can manage the volunteer events and schedules. Acceptance Criteria: Admin can log in using email and password or social login. Admin can log out securely Secure password recovery and multi-factor authentication.","title":"US 1.02 - Login and logout Securely"},{"location":"project-requirements/#us-103-create-and-manage-events","text":"As an Admin, I want to create and manage events so that I can schedule volunteer opportunities. Acceptance Criteria: Admin can create, edit, or delete events. Admin can specify event details like date, time, location, number of volunteers needed, and any specific roles or skills required. Admin can set recurring events.","title":"US 1.03 - Create and Manage Events"},{"location":"project-requirements/#us-104-assign-permissions-to-other-users","text":"As an Admin, I want to assign permissions to other users so that I can delegate event management tasks. Acceptance Criteria: Admin can assign specific permissions (event creation, scheduling, etc.) to other users. Admin can revoke permissions at any time.","title":"US 1.04 - Assign Permissions to Other Users"},{"location":"project-requirements/#us-105-create-and-manage-volunteer-schedulescalendar","text":"As an Admin, I want to create volunteer schedules/calendars so that shifts are organized and resources are optimized. Acceptance Criteria: Admin can create and edit schedules for each event. Admin can assign specific volunteers to shifts or allow volunteers to self-select shifts.","title":"US 1.05 - Create and Manage Volunteer Schedules/Calendar"},{"location":"project-requirements/#us-106-manage-volunteer-attendance","text":"As an Admin, I want to view and manage volunteer attendance so that I can ensure accurate record-keeping. Acceptance Criteria: Admin can see check-ins and check-outs for each event. Admin can override check-in/out statuses if necessary.","title":"US 1.06 - Manage Volunteer Attendance"},{"location":"project-requirements/#us-107-send-communication-emails","text":"As an Admin, I want to send emails to all volunteers at once so that they are informed of upcoming shifts. Acceptance Criteria: Admin can send emails to the volunteers via the email app but can get the email IDs of the volunteers automatically from the platform.","title":"US 1.07 - Send Communication emails"},{"location":"project-requirements/#us-108-sign-up-to-volunteer-for-an-event","text":"As an Admin, I want to sign up to volunteer for an event, so that I can participate in the event just like a regular volunteer. Acceptance Criteria: Admin can see the same calendar of available events as volunteers. Admin can sign up for available shifts in events they create or manage. Admin receives confirmation of sign-up via email or app notification. Admin can check in and check out of events like regular volunteers. Admin receives reminders and event emails based on their preferences. Admin\u2019s participation is recorded alongside other volunteers, but they retain their admin privileges during the event.","title":"US 1.08 - Sign Up to Volunteer for an Event"},{"location":"project-requirements/#us-109-assign-one-time-volunteers","text":"As an Admin, I want to be able to assign one-time volunteers so that I can fill specific roles for events without requiring ongoing commitment from the volunteers. Acceptance Criteria: Admin can assign volunteers for a specific shift or event. Assigned volunteers receive a notification of their assigned shift or role. Admin can view and modify these assignments at any time before the event begins.","title":"US 1.09 - Assign one-time volunteers"},{"location":"project-requirements/#us-110-approve-artist-event-requests","text":"As an Admin, I want to be able to approve artist event requests so that I can review and authorize events that align with organizational goals. Acceptance Criteria: Admin can view a list of event requests submitted by artists. Admin can approve or reject event requests. Approved events become visible in the event calendar for volunteers to sign up. Artists receive emails once their event is approved or rejected.","title":"US 1.10 - Approve Artist Event Requests"},{"location":"project-requirements/#volunteer-user-stories","text":"","title":"Volunteer User Stories:"},{"location":"project-requirements/#us-201-sign-up-to-be-a-volunteer","text":"As a Volunteer, I want to sign up securely so that I can re-use my account to volunteer in the future. Acceptance Criteria: Volunteers can sign up using email and password or social login. Secure password recovery and multi-factor authentication.","title":"US 2.01 - Sign up to be a Volunteer"},{"location":"project-requirements/#us-202-log-in-securely","text":"As a Volunteer, I want to log in securely so that I can access my volunteer schedule and events. Acceptance Criteria: Volunteers can log in using email and password or social login. Secure password recovery and multi-factor authentication.","title":"US 2.02 - Log in Securely"},{"location":"project-requirements/#us-203-view-available-events-on-a-calendar","text":"As a Volunteer, I want to view available events on a calendar so that I can choose which events to sign up for. Acceptance Criteria: Volunteers can see a calendar view of all upcoming events. Volunteers can filter events by date, location, or event type.","title":"US 2.03 - View Available Events on a Calendar"},{"location":"project-requirements/#us-204-sign-up-for-events","text":"As a Volunteer, I want to sign up for events so that I can participate in volunteer activities. Acceptance Criteria: Volunteers can sign up for available shifts in events. Volunteers receive confirmation of sign-up via email or app notification.","title":"US 2.04 - Sign up for Events"},{"location":"project-requirements/#us-205-manage-email-preferences","text":"As a Volunteer, I want to manage my emails so that I can receive or opt out of reminders. Acceptance Criteria: Volunteers can subscribe or unsubscribe to email or app emails. Volunteers receive event reminders based on their preferences.","title":"US 2.05 - Manage Email Preferences"},{"location":"project-requirements/#us-206-check-into-events","text":"As a Volunteer, I want to check into events when my shift starts so that my attendance is recorded. Acceptance Criteria: Volunteers can check into the event once the shift begins (via the app or web). A notification or prompt is sent to the volunteer when the shift start time approaches.","title":"US 2.06 - Check into Events"},{"location":"project-requirements/#us-207-check-out-of-events","text":"As a Volunteer, I want to check out of events when my shift ends so that I can log my volunteer hours. Acceptance Criteria: Volunteers can check out of the event manually once their shift is over. A notification is sent if the volunteer forgets to check out.","title":"US 2.07 - Check out of Events"},{"location":"project-requirements/#us-208-automatic-check-out-when-event-ends","text":"As a Volunteer, I want to be automatically checked out when the event ends so that I don't have to worry if I forget to check out. Acceptance Criteria: Volunteers are automatically checked out if they haven't manually checked out when the event ends.","title":"US 2.08 - Automatic Check-out When Event Ends"},{"location":"project-requirements/#us-209-receive-summary-of-volunteer-hours","text":"As a Volunteer, I want to receive a summary of my volunteer hours after the event so that I can track my contributions. Acceptance Criteria: Volunteers receive an email or notification summarizing their total hours after each event. Volunteers can view a history of their hours in their profile.","title":"US 2.09 - Receive Summary of Volunteer Hours"},{"location":"project-requirements/#us-210-inter-communication-of-volunteers-on-the-platform","text":"As a Volunteer, I want to reach out to fellow volunteers attending an exhibit/event. Acceptance Criteria: Volunteers have the option to chat with fellow volunteers.","title":"US 2.10 - Inter-Communication of volunteers on the platform"},{"location":"project-requirements/#us-211-view-other-volunteer-status","text":"As a volunteer, I want to be able to see the different volunteers that I are signed up for different events Acceptance Criteria: Volunteers can check who is signed up on events made in the calendar","title":"US 2.11 - View other volunteer status"},{"location":"project-requirements/#artist-user-stories","text":"","title":"Artist User Stories:"},{"location":"project-requirements/#us-301-request-events","text":"As an Artist, I want to be able to request events so that I can showcase my work or host activities that involve volunteers. Acceptance Criteria: Artists can fill out a form to request a new event, specifying the event details (date, time, location, description). Event requests must be approved by an admin before they are confirmed.","title":"US 3.01 - Request Events"},{"location":"project-requirements/#us-302-sign-up-to-oversee-an-event","text":"As an Artist, I want to be able to sign up to oversee an event so that I can manage it personally and ensure everything runs smoothly. Acceptance Criteria: Artists can sign up as the primary overseer of the event. Artists receive reminders and emails for the event. Artists can manage volunteers during the event.","title":"US 3.02 - Sign Up to Oversee an Event"},{"location":"project-requirements/#us-303-create-shifts-for-the-event","text":"As an Artist, I want to be able to create any number and duration of shifts for the event so that volunteers can work at different times and the event runs efficiently. Acceptance Criteria: Artists can create multiple shifts, each with a start time, end time, and number of required volunteers. Shifts can be edited or deleted by the artist at any time before the event begins.","title":"US 3.03 - Create Shifts for the Event"},{"location":"project-requirements/#us-304-assign-one-time-volunteers","text":"As an Artist, I want to be able to assign one-time volunteers so that I can get help from specific people for a particular event. Acceptance Criteria: Artists can assign volunteers for a specific shift or event. Assigned volunteers receive an email or app notification of their assigned role and shift.","title":"US 3.04 - Assign one-time volunteers"},{"location":"project-requirements/#us-305-manage-events","text":"As an Artist, I want to be able to edit the events I made so that I can update event details or make changes as needed. Acceptance Criteria: Artists can edit event details such as time, location, description, and number of required volunteers. Changes to the event trigger emails to volunteers who have signed up for affected shifts.","title":"US 3.05 - Manage Events"},{"location":"project-requirements/#general-user-stories","text":"","title":"General User Stories:"},{"location":"project-requirements/#us-401-receive-event-emails","text":"As a User, I want to receive emails for upcoming events so that I am reminded of my commitments. Acceptance Criteria: Users can opt in to receive emails via email or app. Reminders are sent at customizable intervals (e.g., a day before, an hour before the event).","title":"US 4.01 - Receive Event emails"},{"location":"project-requirements/#us-402-view-calendar","text":"As a user, I want to see a calendar view of events for ease of visuality. Acceptance Criteria: Users can always view a calendar of events on their dashboard.","title":"US 4.02 - View Calendar"},{"location":"project-requirements/#moscow","text":"","title":"MoSCoW"},{"location":"project-requirements/#must-have","text":"US 1.01 (Sign up Securely) US 1.02 (Login and logout securely) US 1.03 (Create and Manage Events) US 1.04 (Assign Permissions to Other Users) US 1.05 (Create Volunteer Schedules) US 2.01 (Sign up Securely) US 2.02 (Login and logout securely) US 2.03 (View Available Events on a Calendar) US 2.04 (Sign up for Events) US 4.02 (View Calendar)","title":"Must have:"},{"location":"project-requirements/#should-have","text":"US 1.07 (Send emails or Reminders) US 1.10 (Approve Artist Event Requests) US 2.05 (Manage emails Preferences) US 2.06 (Check into Events) US 2.07 (Check out of Events) US 2.08 (Automatic Check-out When Event Ends) US 3.01 (Request Events) US 3.02 (Sign Up to Oversee an Event) US 3.03 (Create Shifts for the Event) US 3.04 (Assign One-Time Volunteers) US 3.05 (Edit Events) US 4.01 (Recieve Event Emails)","title":"Should have:"},{"location":"project-requirements/#could-have","text":"US 1.06 (Manage Volunteer Attendance) US 1.08 (Sign Up to Volunteer for an Event) US 1.09 (Assign one-time volunteers) US 2.09 (Receive Summary of Volunteer Hours) US 2.11 (View other Volunteer status)","title":"Could have:"},{"location":"project-requirements/#would-like-but-wont-get","text":"US 2.10 (Inter-Communication of volunteers on the platform)","title":"Would Like But Won't Get:"},{"location":"project-requirements/#similar-products","text":"SignUpGenius - Football SignUps Volunteer Management System Host (SignUpGenius). Calendar format can be used as inspiration for scheduling tasks. Timecounts - Bleeding Heart Volunteer Management System Host (Timecounts). This is our client\u2019s previous system. The color palette can be used as inspiration for our system.","title":"Similar Products"},{"location":"project-requirements/#open-source-projects","text":"OpenVolunteerPlatform Automate and optimize work of volunteers for organization or charity. Some of their functionalities include: reports and statistics for admins, management panel, automatic scheduling, producing reports and collecting feedback from the field. The automatic scheduling and management panel can be used as inspiration for our system. Engles System System to coordinate large amount of helpers and shifts for big events. Some of their functionalities include: shifts that are organized through filters, multi language coverage, exports shifts to ical, reward system, Q and A section, 2 factor authentication. Perhaps the filtering and exporting functionalities of the shifts can be used as inpiration to our project.","title":"Open-source Projects"},{"location":"project-requirements/#technical-resources","text":"","title":"Technical Resources"},{"location":"project-requirements/#frontend-react-vite-with-typescript","text":"React Documentation Bulletproof React (React project structure guide) Vite","title":"Frontend: React (Vite with Typescript)"},{"location":"project-requirements/#backend-node-express-with-typescript-postgresql","text":"Node Documentation Express.js Kysely (SQL query builder in node) Setting up Postgres Firebase Authentication Sendgrid","title":"Backend: Node (Express with Typescript) + PostgreSQL"},{"location":"project-requirements/#deployment-cybera","text":"Deploy on Cybera - Documentation","title":"Deployment: Cybera"},{"location":"requirements-traceability-matrix/","text":"Requirements Traceability Matrix This page outlines the tests that are being carried to verify that all requirements are met. Tests ID Requirement Description Justification User Story Test Name Test Result Notes 1 Manage Events Admins can create, delete and edit events 1.03 createEventTest, deleteEventTest, editEventTest Pass UI Test 2 Calendar Events Events can be seen on the calendar and admins can create the events from the calendar 2.03 clickCalendar Pass UI Test 3 Calendar View Admins, volunteers, and artists can view an interactive calendar 4.02 viewCalendar Pass UI Test 4 Volunteer Roles Admins can create and delete volunteer roles Feature createRoleTest, deleteRoleTest Pass UI Test 5 Shifts Admin can create shifts on events 1.05 createShiftTest Pass UI Test 6 Sign Up to Shift Volunteers can sign up to shifts 2.04 shiftSignupTest Pass UI Test","title":"Tests Matrix"},{"location":"requirements-traceability-matrix/#requirements-traceability-matrix","text":"This page outlines the tests that are being carried to verify that all requirements are met.","title":"Requirements Traceability Matrix"},{"location":"requirements-traceability-matrix/#tests","text":"ID Requirement Description Justification User Story Test Name Test Result Notes 1 Manage Events Admins can create, delete and edit events 1.03 createEventTest, deleteEventTest, editEventTest Pass UI Test 2 Calendar Events Events can be seen on the calendar and admins can create the events from the calendar 2.03 clickCalendar Pass UI Test 3 Calendar View Admins, volunteers, and artists can view an interactive calendar 4.02 viewCalendar Pass UI Test 4 Volunteer Roles Admins can create and delete volunteer roles Feature createRoleTest, deleteRoleTest Pass UI Test 5 Shifts Admin can create shifts on events 1.05 createShiftTest Pass UI Test 6 Sign Up to Shift Volunteers can sign up to shifts 2.04 shiftSignupTest Pass UI Test","title":"Tests"},{"location":"software-design/","text":"Software Design This page includes a short description of the overall architecture style of the system, its high-level system components, and their logical (what data they exchange) and control (how they invoke each other) dependencies. Architecture Diagram The application uses a React frontend that communicates with an Express.js backend via a JSON REST API. The Express.js backend utilizes Kysely SQL builder to communicate with PostgreSQL for data management. The backend also uses Firebase Authentication for user authentication, and SendGrid for email functionality. UML Class Diagram The system revolves around Events, which contain Shifts. Users are the core entity, with specialized classes like Volunteer, Artist, and Admin inheriting from the base User class. Volunteers can sign up for Shifts, while Artists have additional capabilities, including the ability to request Events. Admins possess all permissions of Artists and can also manage user roles. This hierarchy represents a progressive increase in permissions and capabilities from Volunteers to Artists to Admins, with each level inheriting the abilities of the previous one and gaining additional functionalities. Sequence Diagrams This sequence diagram details the most important scenarios of how Admins and Volunteers interact with the system via the Application and Database : Admin : Signs up, logs in, creates and manages events, assigns user permissions, and manages volunteer schedules. These actions involve creating, editing, and retrieving objects like events, user permissions, and schedules, with data being passed between the application and database. Volunteer : Signs up, logs in, registers for events, checks in/out of events, and views their schedule. Volunteering time is tracked, and all interactions are handled by the application, which updates the database accordingly. Both roles interact through the Application , which communicates with the Database to validate, store, and retrieve necessary data for user sessions, event management, and scheduling. Low-Fidelity User Interface This is the overall look and feel of the web app. Admin UI Volunteer UI Artist UI","title":"Software Design"},{"location":"software-design/#software-design","text":"This page includes a short description of the overall architecture style of the system, its high-level system components, and their logical (what data they exchange) and control (how they invoke each other) dependencies.","title":"Software Design"},{"location":"software-design/#architecture-diagram","text":"The application uses a React frontend that communicates with an Express.js backend via a JSON REST API. The Express.js backend utilizes Kysely SQL builder to communicate with PostgreSQL for data management. The backend also uses Firebase Authentication for user authentication, and SendGrid for email functionality.","title":"Architecture Diagram"},{"location":"software-design/#uml-class-diagram","text":"The system revolves around Events, which contain Shifts. Users are the core entity, with specialized classes like Volunteer, Artist, and Admin inheriting from the base User class. Volunteers can sign up for Shifts, while Artists have additional capabilities, including the ability to request Events. Admins possess all permissions of Artists and can also manage user roles. This hierarchy represents a progressive increase in permissions and capabilities from Volunteers to Artists to Admins, with each level inheriting the abilities of the previous one and gaining additional functionalities.","title":"UML Class Diagram"},{"location":"software-design/#sequence-diagrams","text":"This sequence diagram details the most important scenarios of how Admins and Volunteers interact with the system via the Application and Database : Admin : Signs up, logs in, creates and manages events, assigns user permissions, and manages volunteer schedules. These actions involve creating, editing, and retrieving objects like events, user permissions, and schedules, with data being passed between the application and database. Volunteer : Signs up, logs in, registers for events, checks in/out of events, and views their schedule. Volunteering time is tracked, and all interactions are handled by the application, which updates the database accordingly. Both roles interact through the Application , which communicates with the Database to validate, store, and retrieve necessary data for user sessions, event management, and scheduling.","title":"Sequence Diagrams"},{"location":"software-design/#low-fidelity-user-interface","text":"This is the overall look and feel of the web app.","title":"Low-Fidelity User Interface"},{"location":"software-design/#admin-ui","text":"","title":"Admin UI"},{"location":"software-design/#volunteer-ui","text":"","title":"Volunteer UI"},{"location":"software-design/#artist-ui","text":"","title":"Artist UI"},{"location":"teamwork/","text":"Teamwork This page provides an overview of the team and its members. Team Canvas Scrum Roles Sprint 1: Scrum Master - Amaan Mohammed Product Owner - Chase Johnson Sprint 2: Scrum Master - Amaan Mohammed Product Owner - Rishit Gajjar Sprint 3: Scrum Master - Rushabh Shah Product Owner - Amaan Mohammed Sprint 4: Scrum Master - Rishit Gajjar Product Owner - Anhadpreet Singh Sprint 5: Scrum Master - Samuel Chan Product Owner - Chase Johnson Belbin Roles Source: https://www.belbin.com/about/belbin-team-roles. Name Preferred Roles Manageable Roles Least Preferred Roles Amaan Mohammed RI, TW, IMP CF, CO, ME SP, PL, SH Anhadpreet Singh CF, TW, RI IMP, SP, PL CO, ME, SH Chase Johnson TW, PL, CO IMP, RI, ME SP, SH, CF Rishit Gajjar IMP, CF, ME TW, SP, PL RI, CO, SH Rushabh Shah TW, CO, SP CF, PL, IMP RI, SH, ME Samuel Chan ME, CF, SP RI, CO, SH IMP, TW, PL Thinking Roles PL (Plant): Tends to be highly creative and good at solving problems in unconventional ways. Chase Johnson (Preferred) Anhadpreet Singh (Manageable) Rishit Gajjar (Manageable) Rushabh Shah (Manageable) ME (Monitor Evaluator): Provides a logical eye, making impartial judgements where required and weighs up the team's options in a dispassionate way. Samuel Chan (Preferred) Rishit Gajjar (Preferred) Amaan Mohammed (Manageable) Chase Johnson (Manageable) SP (Specialist): Brings in-depth knowledge of a key area to the team. Rushabh Shah (Preferred) Samuel Chan (Preferred) Anhadpreet Singh (Manageable) Rishit Gajjar (Manageable) Action Roles: SH (Shaper): Provides the necessary drive to ensure that the team keeps moving and does not lose focus or momentum. Samuel Chan (Manageable) IMP (Implementer): Needed to plan a workable strategy and carry it out as efficiently as possible. Amaan Mohammed (Preferred) Rishit Gajjar (Preferred) Anhadpreet Singh (Manageable) Chase Johnson (Manageable) Rushabh Shah (Manageable) CF (Completer Finisher): Most effectively used at the end of tasks to polish and scrutinize the work for errors, subjecting it to the highest standards of quality control. Samuel Chan (Preferred) Anhadpreet Singh (Preferred) Rishit Gajjar (Preferred) Amaan Mohammed (Manageable) Rushabh Shah (Manageable) People Roles: RI (Resource Investigator): Uses their inquisitive nature to find ideas to bring back to the team. Samuel Chan (Manageable) Amaan Mohammed (Preferred) Anhadpreet Singh (Preferred) Chase Johnson (Manageable) TW (Teamworker): Helps the team to gel, using their versatility to identify the work required and complete it on behalf of the team. Rushabh Shah (Preferred) Amaan Mohammed (Preferred) Chase Johnson (Preferred) Rishit Gajjar (Manageable) CO (Co-ordinator): Needed to focus on the team's objectives, draw out team members and delegate work appropriately. Rushabh Shah (Preferred) Samuel Chan (Manageable) Chase Johnson (Preferred) Amaan Mohammed (Manageable)","title":"Teamwork"},{"location":"teamwork/#teamwork","text":"This page provides an overview of the team and its members.","title":"Teamwork"},{"location":"teamwork/#team-canvas","text":"","title":"Team Canvas"},{"location":"teamwork/#scrum-roles","text":"","title":"Scrum Roles"},{"location":"teamwork/#sprint-1","text":"Scrum Master - Amaan Mohammed Product Owner - Chase Johnson","title":"Sprint 1:"},{"location":"teamwork/#sprint-2","text":"Scrum Master - Amaan Mohammed Product Owner - Rishit Gajjar","title":"Sprint 2:"},{"location":"teamwork/#sprint-3","text":"Scrum Master - Rushabh Shah Product Owner - Amaan Mohammed","title":"Sprint 3:"},{"location":"teamwork/#sprint-4","text":"Scrum Master - Rishit Gajjar Product Owner - Anhadpreet Singh","title":"Sprint 4:"},{"location":"teamwork/#sprint-5","text":"Scrum Master - Samuel Chan Product Owner - Chase Johnson","title":"Sprint 5:"},{"location":"teamwork/#belbin-roles","text":"Source: https://www.belbin.com/about/belbin-team-roles. Name Preferred Roles Manageable Roles Least Preferred Roles Amaan Mohammed RI, TW, IMP CF, CO, ME SP, PL, SH Anhadpreet Singh CF, TW, RI IMP, SP, PL CO, ME, SH Chase Johnson TW, PL, CO IMP, RI, ME SP, SH, CF Rishit Gajjar IMP, CF, ME TW, SP, PL RI, CO, SH Rushabh Shah TW, CO, SP CF, PL, IMP RI, SH, ME Samuel Chan ME, CF, SP RI, CO, SH IMP, TW, PL","title":"Belbin Roles"},{"location":"teamwork/#thinking-roles","text":"","title":"Thinking Roles"},{"location":"teamwork/#pl-plant","text":"Tends to be highly creative and good at solving problems in unconventional ways. Chase Johnson (Preferred) Anhadpreet Singh (Manageable) Rishit Gajjar (Manageable) Rushabh Shah (Manageable)","title":"PL (Plant):"},{"location":"teamwork/#me-monitor-evaluator","text":"Provides a logical eye, making impartial judgements where required and weighs up the team's options in a dispassionate way. Samuel Chan (Preferred) Rishit Gajjar (Preferred) Amaan Mohammed (Manageable) Chase Johnson (Manageable)","title":"ME (Monitor Evaluator):"},{"location":"teamwork/#sp-specialist","text":"Brings in-depth knowledge of a key area to the team. Rushabh Shah (Preferred) Samuel Chan (Preferred) Anhadpreet Singh (Manageable) Rishit Gajjar (Manageable)","title":"SP (Specialist):"},{"location":"teamwork/#action-roles","text":"","title":"Action Roles:"},{"location":"teamwork/#sh-shaper","text":"Provides the necessary drive to ensure that the team keeps moving and does not lose focus or momentum. Samuel Chan (Manageable)","title":"SH (Shaper):"},{"location":"teamwork/#imp-implementer","text":"Needed to plan a workable strategy and carry it out as efficiently as possible. Amaan Mohammed (Preferred) Rishit Gajjar (Preferred) Anhadpreet Singh (Manageable) Chase Johnson (Manageable) Rushabh Shah (Manageable)","title":"IMP (Implementer):"},{"location":"teamwork/#cf-completer-finisher","text":"Most effectively used at the end of tasks to polish and scrutinize the work for errors, subjecting it to the highest standards of quality control. Samuel Chan (Preferred) Anhadpreet Singh (Preferred) Rishit Gajjar (Preferred) Amaan Mohammed (Manageable) Rushabh Shah (Manageable)","title":"CF (Completer Finisher):"},{"location":"teamwork/#people-roles","text":"","title":"People Roles:"},{"location":"teamwork/#ri-resource-investigator","text":"Uses their inquisitive nature to find ideas to bring back to the team. Samuel Chan (Manageable) Amaan Mohammed (Preferred) Anhadpreet Singh (Preferred) Chase Johnson (Manageable)","title":"RI (Resource Investigator):"},{"location":"teamwork/#tw-teamworker","text":"Helps the team to gel, using their versatility to identify the work required and complete it on behalf of the team. Rushabh Shah (Preferred) Amaan Mohammed (Preferred) Chase Johnson (Preferred) Rishit Gajjar (Manageable)","title":"TW (Teamworker):"},{"location":"teamwork/#co-co-ordinator","text":"Needed to focus on the team's objectives, draw out team members and delegate work appropriately. Rushabh Shah (Preferred) Samuel Chan (Manageable) Chase Johnson (Preferred) Amaan Mohammed (Manageable)","title":"CO (Co-ordinator):"},{"location":"user-manual/","text":"User Manual This user manual will split up into four sections: login, the Volunteer view, the Artist view, and the Admin view, respectively. Each section of this Manual aims to provide context for the usability for the functionalities and \u2018pages\u2019 within the product. Section 1 - Login Landing page/homepage Login Sign up Complete sign up Section 2 - Volunteer view Overview Calendar View event details Shift sign up Profile page Section 3 - Artist view Request event View event requests Section 4 - Admin view Create events Create shifts Create volunteer roles Manage Users (change user roles) Emails Section 1 Landing page The landing page of the volunteer management app will display a login button that can be found in two locations. Login Once login has been selected, the user will have a choice of sign in with google or to login manually. Users have a choice to reset password if forgotten. If the users do not have an account yet they can sign up at the bottom Sign up Upon clicking sign up, the user can input their email address and password to sign up. Complete sign up Just before the user accesses the app, a complete sign up page will appear for the user to put in their first and last name and phone number. Section 2 In the volunteer view, volunteers only have access to two tabs on the sidebar, Overview and Calendar. The two icons on the top right are for a light-mode/dark mode toggle and profile page respectively. Overview Overview will display the signed-up shifts that the volunteer has signed up for the next two weeks, as well as Events upcoming in the next two weeks. The shifts that the user has signed up for will have buttons for check in and checkout, with checkout being automatically done for the user after the checkout time has been passed. The shifts and events will have buttons linking to the information for that event as well. Calendar Calendar will display an interactive calendar that will display all the events created. View Event Details Clicking on either the event on the calendar, view event on the signed up shifts, or view details in upcoming events, will display the event title, date, time, venue, and address for that event. And upon clicking on the view details button on each shift, will display who has signed up for that particular shift. Shift sign up Upon sign up, users will be given the option to add notes to their signed up shift. For example, if they would like to remind themselves or the admin of anything for that particular event (bringing extra volunteers, needing different equipment) Profile page On the top right, the user will be able to click on their profile and update their information if needed. They are also able to sign out/verify their email here. Total volunteer hours for each individual volunteer will be displayed here. Section 3 The artist view of the app is identical to the volunteer view with two added features, request event, and view Event requests. View Request Here, in their calendar view, artists are able to click a button on the bottom right to request an event. View Event Requests The event requested will be sent to the Event requests page, which is only available to both Artists and Admins. On the admin view, they will have the option to confirm or deny the request. Once the option is confirmed, the event will be automatically confirmed onto the calendar. Section 4 The admin view gives the user access to mostly everything in the app, including being able to edit and delete users, events, and shifts. The admin view section adds in one more tab Volunteer Management where an admin can view the information of all users, change user roles, and create the different roles for the different shifts. A new icon has also been added in the top right for the admin\u2019s to send emails to the volunteers. Create Events In order to create an event, the user can either click on the calendar itself (which will automatically fill in the date) or click the button on the bottom right, which will bring up the dialog for creating an event. On event details, admin has access to two new buttons, edit event and edit shifts. Edit event will open up a dialog identical to the create event dialog with the information automatically inside, along with a delete event option, while edit shifts will open up a new page to mange the shifts for that event. Create Shifts In create shifts, admins can specifically set up shifts for their event, edit shifts, and delete shifts An admin can also view the notes that any volunteers put down by viewing the details of that particular shift in event details Create volunteer Roles Volunteer management is where the admin can see all the users that have signed up for this app. In the manage users tab, they can select anyone who has signed up and change their user role accordingly to: blocked, admin, artist, or volunteer. This will change their view of the app. In the volunteer roles tab (keep in mind user roles are different from volunteer roles) admins are able to create volunteer roles for the various shifts needed for an event (gallery host, senior volunteer, photographer) Emails In the top right corner, the mail icon will lead the icon to a page where they can send emails to all volunteers who have signed up for any shift for a particular event. Admin\u2019s can also send bulk emails with a click of a button to all volunteers on the database, this will send information about the shifts for any event that has a start date of the current day/today of when the button is clicked.","title":"User Manual"},{"location":"user-manual/#user-manual","text":"This user manual will split up into four sections: login, the Volunteer view, the Artist view, and the Admin view, respectively. Each section of this Manual aims to provide context for the usability for the functionalities and \u2018pages\u2019 within the product.","title":"User Manual"},{"location":"user-manual/#section-1-login","text":"Landing page/homepage Login Sign up Complete sign up","title":"Section 1 - Login"},{"location":"user-manual/#section-2-volunteer-view","text":"Overview Calendar View event details Shift sign up Profile page","title":"Section 2 - Volunteer view"},{"location":"user-manual/#section-3-artist-view","text":"Request event View event requests","title":"Section 3 - Artist view"},{"location":"user-manual/#section-4-admin-view","text":"Create events Create shifts Create volunteer roles Manage Users (change user roles) Emails","title":"Section 4 - Admin view"},{"location":"user-manual/#section-1","text":"","title":"Section 1"},{"location":"user-manual/#landing-page","text":"The landing page of the volunteer management app will display a login button that can be found in two locations.","title":"Landing page"},{"location":"user-manual/#login","text":"Once login has been selected, the user will have a choice of sign in with google or to login manually. Users have a choice to reset password if forgotten. If the users do not have an account yet they can sign up at the bottom","title":"Login"},{"location":"user-manual/#sign-up","text":"Upon clicking sign up, the user can input their email address and password to sign up.","title":"Sign up"},{"location":"user-manual/#complete-sign-up","text":"Just before the user accesses the app, a complete sign up page will appear for the user to put in their first and last name and phone number.","title":"Complete sign up"},{"location":"user-manual/#section-2","text":"In the volunteer view, volunteers only have access to two tabs on the sidebar, Overview and Calendar. The two icons on the top right are for a light-mode/dark mode toggle and profile page respectively.","title":"Section 2"},{"location":"user-manual/#overview","text":"Overview will display the signed-up shifts that the volunteer has signed up for the next two weeks, as well as Events upcoming in the next two weeks. The shifts that the user has signed up for will have buttons for check in and checkout, with checkout being automatically done for the user after the checkout time has been passed. The shifts and events will have buttons linking to the information for that event as well.","title":"Overview"},{"location":"user-manual/#calendar","text":"Calendar will display an interactive calendar that will display all the events created.","title":"Calendar"},{"location":"user-manual/#view-event-details","text":"Clicking on either the event on the calendar, view event on the signed up shifts, or view details in upcoming events, will display the event title, date, time, venue, and address for that event. And upon clicking on the view details button on each shift, will display who has signed up for that particular shift.","title":"View Event Details"},{"location":"user-manual/#shift-sign-up","text":"Upon sign up, users will be given the option to add notes to their signed up shift. For example, if they would like to remind themselves or the admin of anything for that particular event (bringing extra volunteers, needing different equipment)","title":"Shift sign up"},{"location":"user-manual/#profile-page","text":"On the top right, the user will be able to click on their profile and update their information if needed. They are also able to sign out/verify their email here. Total volunteer hours for each individual volunteer will be displayed here.","title":"Profile page"},{"location":"user-manual/#section-3","text":"The artist view of the app is identical to the volunteer view with two added features, request event, and view Event requests.","title":"Section 3"},{"location":"user-manual/#view-request","text":"Here, in their calendar view, artists are able to click a button on the bottom right to request an event.","title":"View Request"},{"location":"user-manual/#view-event-requests","text":"The event requested will be sent to the Event requests page, which is only available to both Artists and Admins. On the admin view, they will have the option to confirm or deny the request. Once the option is confirmed, the event will be automatically confirmed onto the calendar.","title":"View Event Requests"},{"location":"user-manual/#section-4","text":"The admin view gives the user access to mostly everything in the app, including being able to edit and delete users, events, and shifts. The admin view section adds in one more tab Volunteer Management where an admin can view the information of all users, change user roles, and create the different roles for the different shifts. A new icon has also been added in the top right for the admin\u2019s to send emails to the volunteers.","title":"Section 4"},{"location":"user-manual/#create-events","text":"In order to create an event, the user can either click on the calendar itself (which will automatically fill in the date) or click the button on the bottom right, which will bring up the dialog for creating an event. On event details, admin has access to two new buttons, edit event and edit shifts. Edit event will open up a dialog identical to the create event dialog with the information automatically inside, along with a delete event option, while edit shifts will open up a new page to mange the shifts for that event.","title":"Create Events"},{"location":"user-manual/#create-shifts","text":"In create shifts, admins can specifically set up shifts for their event, edit shifts, and delete shifts An admin can also view the notes that any volunteers put down by viewing the details of that particular shift in event details","title":"Create Shifts"},{"location":"user-manual/#create-volunteer-roles","text":"Volunteer management is where the admin can see all the users that have signed up for this app. In the manage users tab, they can select anyone who has signed up and change their user role accordingly to: blocked, admin, artist, or volunteer. This will change their view of the app. In the volunteer roles tab (keep in mind user roles are different from volunteer roles) admins are able to create volunteer roles for the various shifts needed for an event (gallery host, senior volunteer, photographer)","title":"Create volunteer Roles"},{"location":"user-manual/#emails","text":"In the top right corner, the mail icon will lead the icon to a page where they can send emails to all volunteers who have signed up for any shift for a particular event. Admin\u2019s can also send bulk emails with a click of a button to all volunteers on the database, this will send information about the shifts for any event that has a start date of the current day/today of when the button is clicked.","title":"Emails"}]}